{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/comics/[id]",
      "regex": "^/comics/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/comics/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/movies/[id]",
      "regex": "^/movies/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/movies/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/readcomic/[id]",
      "regex": "^/readcomic/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/readcomic/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/readcomic_vertical/[id]",
      "regex": "^/readcomic_vertical/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/readcomic_vertical/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/users/[id]",
      "regex": "^/users/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/users/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/users/[id]/edit",
      "regex": "^/users/([^/]+?)/edit(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/users/(?<nxtPid>[^/]+?)/edit(?:/)?$"
    },
    {
      "page": "/watch/[id]",
      "regex": "^/watch/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/watch/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/3d",
      "regex": "^/3d(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/3d(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/calendar",
      "regex": "^/calendar(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/calendar(?:/)?$"
    },
    {
      "page": "/comics",
      "regex": "^/comics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/comics(?:/)?$"
    },
    {
      "page": "/demo",
      "regex": "^/demo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/demo(?:/)?$"
    },
    {
      "page": "/enhanced",
      "regex": "^/enhanced(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/enhanced(?:/)?$"
    },
    {
      "page": "/forgot-password",
      "regex": "^/forgot\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/forgot\\-password(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/movies",
      "regex": "^/movies(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/movies(?:/)?$"
    },
    {
      "page": "/signup",
      "regex": "^/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/signup(?:/)?$"
    },
    {
      "page": "/users",
      "regex": "^/users(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/users(?:/)?$"
    },
    {
      "page": "/users/create",
      "regex": "^/users/create(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/users/create(?:/)?$"
    },
    {
      "page": "/users/new",
      "regex": "^/users/new(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/users/new(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}