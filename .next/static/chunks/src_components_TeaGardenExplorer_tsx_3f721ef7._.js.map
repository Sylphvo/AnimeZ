{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/phuvm/source/repos/AnimeZ/src/components/TeaGardenExplorer.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useEffect, useRef, useState, useCallback } from 'react'\r\nimport * as THREE from 'three'\r\n// GLTFLoader will be imported dynamically inside loadCharacter to avoid TypeScript module/typing errors\r\n\r\ninterface Movement {\r\n  forward: boolean\r\n  backward: boolean\r\n  left: boolean\r\n  right: boolean\r\n  jump: boolean\r\n  shift: boolean\r\n}\r\n\r\ninterface Translations {\r\n  [key: string]: {\r\n    controlsWasd: string\r\n    controlsSpace: string\r\n    controlsShift: string\r\n    loadingText: string\r\n    loadingWait: string\r\n  }\r\n}\r\n\r\n\r\n\r\nconst TRANSLATIONS: Translations = {\r\n  \"en-US\": {\r\n    \"controlsWasd\": \"WASD/Arrow Keys: Move\",\r\n    \"controlsSpace\": \"Space: Jump\",\r\n    \"controlsShift\": \"Shift: Run\",\r\n    \"loadingText\": \"Loading Tea Garden\",\r\n    \"loadingWait\": \"Please wait...\"\r\n  },\r\n  \"es-ES\": {\r\n    \"controlsWasd\": \"WASD/Flechas: Mover\",\r\n    \"controlsSpace\": \"Espacio: Saltar\",\r\n    \"controlsShift\": \"Shift: Correr\",\r\n    \"loadingText\": \"Cargando Jardín de Té\",\r\n    \"loadingWait\": \"Por favor espere...\"\r\n  },\r\n  \"vi-VN\": {\r\n    \"controlsWasd\": \"WASD/Mũi tên: Di chuyển\",\r\n    \"controlsSpace\": \"Space: Nhảy\",\r\n    \"controlsShift\": \"Shift: Chạy\",\r\n    \"loadingText\": \"Đang tải Vườn Trà\",\r\n    \"loadingWait\": \"Vui lòng đợi...\"\r\n  }\r\n}\r\n\r\nexport default function TeaGardenExplorer() {\r\n  const mountRef = useRef<HTMLDivElement>(null)\r\n  const sceneRef = useRef<THREE.Scene | null>(null)\r\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null)\r\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null)\r\n  const animationIdRef = useRef<number | undefined>(undefined)\r\n  const handsRef = useRef<THREE.Group | null>(null)\r\n  const characterRef = useRef<THREE.Group | null>(null)\r\n  const [thirdPerson, setThirdPerson] = useState(false)\r\n  //const clockRef = useRef<THREE.Clock>(new THREE.Clock())\r\n\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [locale, setLocale] = useState<keyof typeof TRANSLATIONS>('en-US')\r\n\r\n  // Invert mouse options\r\n  const [invertY, setInvertY] = useState(false)\r\n  const [invertX, setInvertX] = useState(false)\r\n\r\n  // Toggle for optional physics engine (cannon-es)\r\n  const [usePhysicsEngine, setUsePhysicsEngine] = useState(false)\r\n  \r\n  // Game state refs\r\n  const movementRef = useRef<Movement>({\r\n    forward: false,\r\n    backward: false,\r\n    left: false,\r\n    right: false,\r\n    jump: false,\r\n    shift: false\r\n  })\r\n\r\n  const mouseRef = useRef({ phi: 0, theta: 0 })\r\n  const physicsRef = useRef({ yVelocity: 0, isGrounded: true })\r\n  const playerRef = useRef(new THREE.Vector3(0, 1.6, 0)) // first-person player position\r\n  const EYE_HEIGHT = 1.6\r\n\r\n  // Physics-related refs (dynamically set when cannon-es is loaded)\r\n  const physicsWorldRef = useRef<any | null>(null)\r\n  const playerBodyRef = useRef<any | null>(null)\r\n  const cannonRef = useRef<any | null>(null)\r\n\r\n  // Trees group ref used for simple collision detection\r\n  const treesGroupRef = useRef<THREE.Group | null>(null)\r\n\r\n  // Player collision radius used by simple physics / cannon body\r\n  const PLAYER_RADIUS = 0.3\r\n  //const chunksRef = useRef<Map<string, THREE.Group>>(new Map())\r\n  //const loadedChunksRef = useRef<Set<string>>(new Set())\r\n\r\n  // Constants\r\n  const CHUNK_SIZE = 50;\r\n  const GRAVITY = -0.015;\r\n  const JUMP_POWER = 0.3;\r\n\r\n  // Translation helper\r\n  const t = useCallback((key: keyof typeof TRANSLATIONS['en-US']) => {\r\n    return TRANSLATIONS[locale]?.[key] || TRANSLATIONS['en-US'][key] || key\r\n  }, [locale])\r\n\r\n  // Detect locale\r\n  useEffect(() => {\r\n    const browserLocale = navigator.languages?.[0] || navigator.language || 'en-US'\r\n    const findMatchingLocale = (locale: string) => {\r\n      if (TRANSLATIONS[locale]) return locale\r\n      const lang = locale.split('-')[0]\r\n      const match = Object.keys(TRANSLATIONS).find(key => key.startsWith(lang + '-'))\r\n      return match || 'en-US'\r\n    }\r\n    setLocale(findMatchingLocale(browserLocale))\r\n  }, [])\r\n\r\n  // Texture creation\r\n  const createTextures = useCallback(() => {\r\n    // Create grass texture\r\n    const canvas = document.createElement('canvas')\r\n    canvas.width = 256\r\n    canvas.height = 256\r\n    const context = canvas.getContext('2d')!\r\n    context.fillStyle = '#3a5f3a'\r\n    context.fillRect(0, 0, 256, 256)\r\n    // Add some noise for grass\r\n    for (let i = 0; i < 1000; i++) {\r\n      context.fillStyle = `hsl(${80 + Math.random() * 20}, 50%, ${30 + Math.random() * 20}%)`\r\n      context.fillRect(Math.random() * 256, Math.random() * 256, 1, 1)\r\n    }\r\n    const grassTexture = new THREE.CanvasTexture(canvas)\r\n    grassTexture.wrapS = THREE.RepeatWrapping\r\n    grassTexture.wrapT = THREE.RepeatWrapping\r\n    grassTexture.repeat.set(10, 10)\r\n    return { grassTexture }\r\n  }, [])\r\n\r\n  // Material creation\r\n  const createMaterials = useCallback((textures: any) => {\r\n    return {\r\n      grass: new THREE.MeshLambertMaterial({ color: 0x3a5f3a, map: textures.grassTexture }),\r\n      mossyGrass: new THREE.MeshLambertMaterial({ color: 0x4a6f4a }),\r\n      water: new THREE.MeshPhongMaterial({\r\n        color: 0x4682B4,\r\n        shininess: 100,\r\n        transparent: true,\r\n        opacity: 0.8\r\n      }),\r\n      stone: new THREE.MeshLambertMaterial({ color: 0x808080 }),\r\n      wood: new THREE.MeshLambertMaterial({ color: 0x8B4513 }),\r\n      trunk: new THREE.MeshLambertMaterial({ color: 0x4a3c28 }),\r\n      lantern: new THREE.MeshPhongMaterial({\r\n        color: 0xff6b35,\r\n        emissive: 0xff6b35,\r\n        emissiveIntensity: 0.2\r\n      }),\r\n      teaPlant: new THREE.MeshLambertMaterial({ color: 0x228B22 })\r\n    }\r\n  }, [])\r\n\r\n  // Tea plant creation with InstancedMesh\r\n  const createTeaPlants = useCallback((materials: any) => {\r\n    const geometry = new THREE.SphereGeometry(0.3, 8, 6)\r\n    const instancedMesh = new THREE.InstancedMesh(geometry, materials.teaPlant, 200)\r\n    const matrix = new THREE.Matrix4()\r\n    const position = new THREE.Vector3()\r\n    const rotation = new THREE.Euler()\r\n    const scale = new THREE.Vector3()\r\n    for (let i = 0; i < 200; i++) {\r\n      position.set(\r\n        (Math.random() - 0.5) * CHUNK_SIZE,\r\n        0.3,\r\n        (Math.random() - 0.5) * CHUNK_SIZE\r\n      )\r\n      rotation.set(\r\n        0,\r\n        Math.random() * Math.PI * 2,\r\n        0\r\n      )\r\n      scale.setScalar(0.5 + Math.random() * 0.5)\r\n      matrix.makeRotationFromEuler(rotation)\r\n      matrix.setPosition(position)\r\n      matrix.scale(scale)\r\n      instancedMesh.setMatrixAt(i, matrix)\r\n    }\r\n    instancedMesh.castShadow = true\r\n    return instancedMesh\r\n  }, [])\r\n\r\n  // Ground plane creation (keep a subtle ground but not dominating grass)\r\n  const createGround = useCallback((materials: any) => {\r\n    const geometry = new THREE.PlaneGeometry(CHUNK_SIZE * 2, CHUNK_SIZE * 2)\r\n    // use mossyGrass/stone instead of bright grass\r\n    const ground = new THREE.Mesh(geometry, materials.mossyGrass || materials.grass)\r\n    ground.rotation.x = -Math.PI / 2\r\n    ground.receiveShadow = true\r\n    return ground\r\n  }, [])\r\n\r\n  // Sky gradient\r\n  const createSky = useCallback(() => {\r\n    const skyGeometry = new THREE.SphereGeometry(1000, 32, 32)\r\n    const skyMaterial = new THREE.ShaderMaterial({\r\n      vertexShader: `\r\n        varying vec3 vWorldPosition;\r\n        void main() {\r\n          vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n          vWorldPosition = worldPosition.xyz;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec3 vWorldPosition;\r\n        void main() {\r\n          vec3 skyColor = vec3(0.5, 0.7, 1.0); // Light blue\r\n          vec3 groundColor = vec3(0.1, 0.1, 0.1); // Dark\r\n          float h = normalize(vWorldPosition).y;\r\n          gl_FragColor = vec4(mix(groundColor, skyColor, max(pow(max(h, 0.0), 0.8), 0.0)), 1.0);\r\n        }\r\n      `,\r\n      side: THREE.BackSide\r\n    })\r\n    const sky = new THREE.Mesh(skyGeometry, skyMaterial)\r\n    return sky\r\n  }, [])\r\n\r\n  // Lighting setup\r\n  const setupLighting = useCallback((scene: THREE.Scene) => {\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4)\r\n    scene.add(ambientLight)\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)\r\n    directionalLight.position.set(50, 50, 25)\r\n    directionalLight.castShadow = true\r\n    directionalLight.shadow.mapSize.width = 2048\r\n    directionalLight.shadow.mapSize.height = 2048\r\n    directionalLight.shadow.camera.near = 0.5\r\n    directionalLight.shadow.camera.far = 500\r\n    directionalLight.shadow.camera.left = -100\r\n    directionalLight.shadow.camera.right = 100\r\n    directionalLight.shadow.camera.top = 100\r\n    directionalLight.shadow.camera.bottom = -100\r\n    scene.add(directionalLight)\r\n  }, [])\r\n\r\n  // Fog setup\r\n  const setupFog = useCallback((scene: THREE.Scene) => {\r\n    scene.fog = new THREE.Fog(0x87CEEB, 50, 200)\r\n  }, [])\r\n\r\n  // Initialization\r\n  useEffect(() => {\r\n    if (!mountRef.current) return\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene()\r\n    sceneRef.current = scene\r\n\r\n    // Create camera\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\r\n    // first-person: start at player eye height and use YXZ order so yaw (Y) is applied before pitch (X)\r\n    camera.rotation.order = 'YXZ'\r\n    camera.position.copy(playerRef.current)\r\n    cameraRef.current = camera\r\n\r\n    // Create renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    renderer.shadowMap.enabled = true\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n    rendererRef.current = renderer\r\n    mountRef.current.appendChild(renderer.domElement)\r\n\r\n    // Create textures and materials\r\n    const textures = createTextures()\r\n    const materials = createMaterials(textures)\r\n\r\n    // Load character model (try glTF in public/models/character.glb), fallback to simple placeholder\r\n        const loadCharacter = async () => {\r\n          try {\r\n            // dynamically import GLTFLoader at runtime; use ts-ignore to avoid TS compile-time module errors\r\n            // @ts-ignore\r\n            const { GLTFLoader } = await import('three/examples/jsm/loaders/GLTFLoader')\r\n            const loader = new GLTFLoader()\r\n            const gltf = await loader.loadAsync('/models/character.glb')\r\n            const root = gltf.scene\r\n            root.traverse((c: any) => {\r\n              if (c.isMesh) {\r\n                c.castShadow = true\r\n                c.receiveShadow = true\r\n              }\r\n            })\r\n            root.scale.set(1, 1, 1)\r\n            root.position.copy(playerRef.current)\r\n            characterRef.current = root\r\n            scene.add(root)\r\n          } catch (e) {\r\n            // fallback placeholder\r\n            const placeholder = new THREE.Group()\r\n            const body = new THREE.BoxGeometry(0.6, 1.6, 0.4)\r\n            const mat = materials.wood || new THREE.MeshStandardMaterial({ color: 0x996644 })\r\n            const mesh = new THREE.Mesh(body, mat)\r\n            mesh.castShadow = true\r\n            mesh.position.set(0, 0.8, 0)\r\n            placeholder.add(mesh)\r\n            placeholder.position.copy(playerRef.current)\r\n            characterRef.current = placeholder\r\n            scene.add(placeholder)\r\n          }\r\n        }\r\n    loadCharacter()\r\n\r\n    // Create first-person hands and attach to camera\r\n    const hands = createHands(materials)\r\n    handsRef.current = hands\r\n    camera.add(hands) // attach so hands follow camera transforms\r\n\r\n    const ground = createGround(materials)\r\n    scene.add(ground)\r\n\r\n    // Add trees instead of dense grass/tea plant field\r\n    const treesGroup = createTrees(materials, 80, CHUNK_SIZE) // adjust count as needed\r\n    treesGroupRef.current = treesGroup\r\n    scene.add(treesGroup)\r\n\r\n    // Optional: keep some small shrubs as instanced meshes\r\n    // const teaBushes = createTeaPlants(materials)\r\n    // scene.add(teaBushes)\r\n\r\n    // Add sky\r\n    const sky = createSky()\r\n    scene.add(sky)\r\n\r\n    // Setup lighting\r\n    setupLighting(scene)\r\n\r\n    // Setup fog\r\n    setupFog(scene)\r\n\r\n    // Add a checkers board (size 8, square = 1 unit) placed ahead of the camera\r\n    const checkers = createCheckersBoard(materials, 8, 1, { position: new THREE.Vector3(0, 0.05, -10) })\r\n    scene.add(checkers)\r\n    \r\n    // Add tea plants\r\n    const teaPlants = createTeaPlants(materials)\r\n    scene.add(teaPlants)\r\n    \r\n    // Add trees (duplicate-safe)\r\n    const trees = createTrees(materials, 60, CHUNK_SIZE)\r\n    scene.add(trees)\r\n\r\n    setIsLoading(false)\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      animationIdRef.current = requestAnimationFrame(animate)\r\n\r\n      // hands bob / sway — safe-guard refs\r\n      const handsGroup = handsRef.current\r\n      if (handsGroup) {\r\n        const t = performance.now() / 1000\r\n        const movement = movementRef.current\r\n        const isMoving = movement.forward || movement.backward || movement.left || movement.right\r\n        const walkSpeed = isMoving ? 8 : 2\r\n        const bobAmp = isMoving ? 0.04 : 0.01\r\n        // vertical bob\r\n        handsGroup.position.y = -0.2 + Math.sin(t * walkSpeed) * bobAmp\r\n        // small forward/back tilt\r\n        handsGroup.rotation.x = Math.sin(t * walkSpeed * 1.2) * bobAmp * 0.7\r\n        // slight sway when strafing\r\n        const strafe = (movement.left ? -1 : 0) + (movement.right ? 1 : 0)\r\n        handsGroup.rotation.z = strafe * 0.1 * (isMoving ? 1 : 0)\r\n      }\r\n\r\n      renderer.render(scene, camera)\r\n    }\r\n    animate()\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      if (animationIdRef.current) {\r\n        cancelAnimationFrame(animationIdRef.current)\r\n      }\r\n      // detach hands from camera\r\n      if (handsRef.current && camera) {\r\n        camera.remove(handsRef.current)\r\n      }\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current?.removeChild(renderer.domElement)\r\n      }\r\n      // cleanup physics if created\r\n      if (physicsWorldRef.current) {\r\n        try {\r\n          physicsWorldRef.current.bodies?.forEach((b: any) => physicsWorldRef.current.removeBody(b))\r\n        } catch {}\r\n        physicsWorldRef.current = null\r\n        playerBodyRef.current = null\r\n        cannonRef.current = null\r\n      }\r\n      renderer.dispose()\r\n    }\r\n  }, []) // keep single scene init\r\n\r\n  // Physics engine init / teardown (cannon-es) — dynamic import when toggle enabled\r\n  useEffect(() => {\r\n    if (!usePhysicsEngine || !sceneRef.current) {\r\n      // if disabling physics, teardown existing world\r\n      if (physicsWorldRef.current) {\r\n        try {\r\n          physicsWorldRef.current.bodies?.forEach((b: any) => physicsWorldRef.current.removeBody(b))\r\n        } catch {}\r\n        physicsWorldRef.current = null\r\n        playerBodyRef.current = null\r\n        cannonRef.current = null\r\n      }\r\n      return\r\n    }\r\n\r\n    let cancelled = false\r\n    ;(async () => {\r\n      try {\r\n        const CANNON = await import('cannon-es')\r\n        if (cancelled) return\r\n        cannonRef.current = CANNON\r\n        const world = new CANNON.World()\r\n        world.broadphase = new CANNON.NaiveBroadphase()\r\n        ;(world.solver as any).iterations = 10\r\n        world.gravity.set(0, -9.82, 0)\r\n        physicsWorldRef.current = world\r\n\r\n        // create ground body (large static plane)\r\n        const groundBody = new CANNON.Body({ mass: 0 })\r\n        const groundShape = new CANNON.Plane()\r\n        groundBody.addShape(groundShape)\r\n        groundBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0)\r\n        groundBody.position.set(0, 0, 0)\r\n        world.addBody(groundBody)\r\n\r\n        // create player body (sphere approx)\r\n        const playerShape = new CANNON.Sphere(PLAYER_RADIUS)\r\n        const playerBody = new CANNON.Body({ mass: 1, shape: playerShape, fixedRotation: true })\r\n        playerBody.position.set(playerRef.current.x, playerRef.current.y, playerRef.current.z)\r\n        playerBody.linearDamping = 0.9\r\n        playerBody.collisionFilterGroup = 1\r\n        world.addBody(playerBody)\r\n        playerBodyRef.current = playerBody\r\n\r\n        // create static bodies for trees to block player\r\n        const treesGroup = treesGroupRef.current\r\n        if (treesGroup) {\r\n          treesGroup.children.forEach((tree: any) => {\r\n            const pos = tree.position\r\n            const radius = 0.6 * (tree.scale.x || 1)\r\n            const shape = new CANNON.Sphere(radius)\r\n            const body = new CANNON.Body({ mass: 0 })\r\n            body.addShape(shape)\r\n            body.position.set(pos.x, pos.y + 1, pos.z) // trunk approx center\r\n            world.addBody(body)\r\n          })\r\n        }\r\n\r\n        // simple step loop: run in a timer to keep physics updated\r\n        const step = () => {\r\n          if (!physicsWorldRef.current) return\r\n          const fixedTimeStep = 1.0 / 60.0\r\n          physicsWorldRef.current.step(fixedTimeStep)\r\n          // sync playerRef from body\r\n          if (playerBodyRef.current) {\r\n            const p = playerBodyRef.current.position\r\n            playerRef.current.set(p.x, p.y, p.z)\r\n          }\r\n        }\r\n        const interval = setInterval(step, 1000 / 60)\r\n\r\n        return () => {\r\n          clearInterval(interval)\r\n        }\r\n      } catch (err) {\r\n        // dynamic import failed: notify user in console\r\n        console.error('Failed to load cannon-es; install it with `npm i cannon-es` to enable physics', err)\r\n        setUsePhysicsEngine(false)\r\n      }\r\n    })()\r\n\r\n    return () => { cancelled = true }\r\n  }, [usePhysicsEngine])\r\n\r\n  // Event listeners\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      switch (event.code) {\r\n        case 'KeyW':\r\n        case 'ArrowUp':\r\n          movementRef.current.forward = true\r\n          break\r\n        case 'KeyS':\r\n        case 'ArrowDown':\r\n          movementRef.current.backward = true\r\n          break\r\n        case 'KeyA':\r\n        case 'ArrowLeft':\r\n          movementRef.current.left = true\r\n          break\r\n        case 'KeyD':\r\n        case 'ArrowRight':\r\n          movementRef.current.right = true\r\n          break\r\n        case 'Space':\r\n          if (physicsRef.current.isGrounded) {\r\n            physicsRef.current.yVelocity = JUMP_POWER\r\n            physicsRef.current.isGrounded = false\r\n          }\r\n          break\r\n        case 'ShiftLeft':\r\n        case 'ShiftRight':\r\n          movementRef.current.shift = true\r\n          break\r\n      }\r\n    }\r\n\r\n    const handleKeyUp = (event: KeyboardEvent) => {\r\n      switch (event.code) {\r\n        case 'KeyW':\r\n        case 'ArrowUp':\r\n          movementRef.current.forward = false\r\n          break\r\n        case 'KeyS':\r\n        case 'ArrowDown':\r\n          movementRef.current.backward = false\r\n          break\r\n        case 'KeyA':\r\n        case 'ArrowLeft':\r\n          movementRef.current.left = false\r\n          break\r\n        case 'KeyD':\r\n        case 'ArrowRight':\r\n          movementRef.current.right = false\r\n          break\r\n        case 'ShiftLeft':\r\n        case 'ShiftRight':\r\n          movementRef.current.shift = false\r\n          break\r\n      }\r\n    }\r\n\r\n    const handleMouseMove = (event: MouseEvent) => {\r\n      if (!document.pointerLockElement) return\r\n      const signX = invertX ? -1 : 1\r\n      const signY = invertY ? -1 : 1\r\n      // horizontal (theta) and vertical (phi). adjust signs to invert axes.\r\n      mouseRef.current.theta += event.movementX * 0.002 * signX\r\n      mouseRef.current.phi -= event.movementY * 0.002 * signY\r\n      mouseRef.current.phi = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, mouseRef.current.phi))\r\n    }\r\n    \r\n    const handleClick = () => {\r\n      if (mountRef.current) {\r\n        mountRef.current.requestPointerLock()\r\n      }\r\n    }\r\n    \r\n    window.addEventListener('keydown', handleKeyDown)\r\n    window.addEventListener('keyup', handleKeyUp)\r\n    window.addEventListener('mousemove', handleMouseMove)\r\n    if (mountRef.current) {\r\n      mountRef.current.addEventListener('click', handleClick)\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown)\r\n      window.removeEventListener('keyup', handleKeyUp)\r\n      window.removeEventListener('mousemove', handleMouseMove)\r\n      if (mountRef.current) {\r\n        mountRef.current.removeEventListener('click', handleClick)\r\n      }\r\n    }\r\n  }, [invertX, invertY])\r\n\r\n  // Movement and physics (use physics engine when enabled, otherwise kinematic + simple collision)\r\n  useEffect(() => {\r\n    const updateMovement = () => {\r\n      if (!cameraRef.current) return\r\n\r\n      const camera = cameraRef.current\r\n      const movement = movementRef.current\r\n      const physics = physicsRef.current\r\n      const player = playerRef.current\r\n      const speed = movement.shift ? 0.2 : 0.1\r\n\r\n      // If physics engine enabled, control playerBody velocity instead of manual position\r\n      if (usePhysicsEngine && playerBodyRef.current && physicsWorldRef.current) {\r\n        const CANNON = cannonRef.current\r\n        const body = playerBodyRef.current\r\n        // compute desired horizontal velocity in world XZ plane\r\n        const forward = new THREE.Vector3()\r\n        camera.getWorldDirection(forward)\r\n        forward.y = 0\r\n        forward.normalize()\r\n        const right = new THREE.Vector3().crossVectors(forward, new THREE.Vector3(0,1,0)).normalize()\r\n        const vel = new CANNON.Vec3(0, body.velocity.y, 0)\r\n        if (movement.forward) vel.vadd(new CANNON.Vec3(forward.x * speed * 60, 0, forward.z * speed * 60), vel)\r\n        if (movement.backward) vel.vadd(new CANNON.Vec3(-forward.x * speed * 60, 0, -forward.z * speed * 60), vel)\r\n        if (movement.left) vel.vadd(new CANNON.Vec3(-right.x * speed * 60, 0, -right.z * speed * 60), vel)\r\n        if (movement.right) vel.vadd(new CANNON.Vec3(right.x * speed * 60, 0, right.z * speed * 60), vel)\r\n        // apply velocity (keep y from physics)\r\n        body.velocity.set(vel.x, body.velocity.y, vel.z)\r\n        // jump\r\n        if (movement.jump && Math.abs(body.velocity.y) < 0.001) {\r\n          body.velocity.y = JUMP_POWER * 50\r\n        }\r\n        // update playerRef from body (physics loop also updates periodically)\r\n        const p = body.position\r\n        playerRef.current.set(p.x, p.y, p.z)\r\n      } else {\r\n        // Kinematic movement (existing): compute candidate position then check collisions with trees (simple sphere check)\r\n        // Apply camera rotation from mouse for direction vectors\r\n        camera.rotation.x = mouseRef.current.phi\r\n        camera.rotation.y = mouseRef.current.theta\r\n        camera.rotation.z = 0\r\n\r\n        const dir = new THREE.Vector3()\r\n        camera.getWorldDirection(dir)\r\n        dir.y = 0\r\n        dir.normalize()\r\n        const right = new THREE.Vector3()\r\n        right.crossVectors(dir, new THREE.Vector3(0, 1, 0)).normalize()\r\n\r\n        const candidate = player.clone()\r\n        if (movement.forward) candidate.addScaledVector(dir, speed)\r\n        if (movement.backward) candidate.addScaledVector(dir, -speed)\r\n        if (movement.left) candidate.addScaledVector(right, -speed)\r\n        if (movement.right) candidate.addScaledVector(right, speed)\r\n\r\n        // simple collision vs treesGroupRef: don't move inside tree radius\r\n        const trees = treesGroupRef.current\r\n        let blocked = false\r\n        if (trees) {\r\n          for (const t of trees.children as any) {\r\n            const dx = candidate.x - t.position.x\r\n            const dz = candidate.z - t.position.z\r\n            const dist2 = dx*dx + dz*dz\r\n            const minDist = (PLAYER_RADIUS + 0.6 * (t.scale.x || 1)) ** 2\r\n            if (dist2 < minDist) {\r\n              blocked = true\r\n              break\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!blocked) {\r\n          player.copy(candidate)\r\n        }\r\n\r\n        // Physics fallback vertical\r\n        physics.yVelocity += GRAVITY\r\n        player.y += physics.yVelocity\r\n        if (player.y <= EYE_HEIGHT) {\r\n          player.y = EYE_HEIGHT\r\n          physics.yVelocity = 0\r\n          physics.isGrounded = true\r\n        }\r\n      }\r\n\r\n      // Update camera depending on view mode\r\n      if (thirdPerson) {\r\n        // place camera behind and above the player\r\n        const back = new THREE.Vector3(0, 0, 1).applyEuler(new THREE.Euler(0, mouseRef.current.theta, 0))\r\n        const camPos = player.clone().addScaledVector(back, 3) // 3 units behind\r\n        camPos.y = player.y + 1.6\r\n        camera.position.lerp(camPos, 0.2)\r\n        camera.lookAt(player.x, player.y + 1.0, player.z)\r\n      } else {\r\n        // first-person\r\n        camera.position.copy(player)\r\n      }\r\n\r\n      // sync character model (visible in third-person)\r\n      if (characterRef.current) {\r\n        const char = characterRef.current\r\n        char.position.lerp(new THREE.Vector3(player.x, 0, player.z), 0.3)\r\n        char.rotation.y = mouseRef.current.theta\r\n        char.visible = thirdPerson\r\n      }\r\n    }\r\n\r\n    const interval = setInterval(updateMovement, 16) // ~60fps\r\n \r\n    return () => clearInterval(interval)\r\n  }, [thirdPerson, usePhysicsEngine])\r\n\r\n  return (\r\n    <div className=\"w-full h-screen relative\">\r\n      <div ref={mountRef} className=\"w-full h-full\" />\r\n      {isLoading && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 text-white\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-2xl mb-4\">{t('loadingText')}</div>\r\n            <div>{t('loadingWait')}</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n     {/* Invert mouse controls */}\r\n     <div className=\"absolute top-4 right-4 text-white bg-black bg-opacity-50 p-2 rounded\">\r\n       <label className=\"flex items-center gap-2\">\r\n         <input type=\"checkbox\" checked={invertY} onChange={() => setInvertY(v => !v)} />\r\n         <span className=\"text-sm\">Invert Y</span>\r\n       </label>\r\n       <label className=\"flex items-center gap-2 mt-1\">\r\n         <input type=\"checkbox\" checked={invertX} onChange={() => setInvertX(v => !v)} />\r\n         <span className=\"text-sm\">Invert X</span>\r\n       </label>\r\n       <label className=\"flex items-center gap-2 mt-1\">\r\n         <input type=\"checkbox\" checked={thirdPerson} onChange={() => setThirdPerson(v => !v)} />\r\n         <span className=\"text-sm\">Third-person</span>\r\n       </label>\r\n       <label className=\"flex items-center gap-2 mt-1\">\r\n         <input type=\"checkbox\" checked={usePhysicsEngine} onChange={() => setUsePhysicsEngine(v => !v)} />\r\n         <span className=\"text-sm\">Enable Physics Engine (cannon-es)</span>\r\n       </label>\r\n     </div>\r\n      <div className=\"absolute bottom-4 left-4 text-white bg-black bg-opacity-50 p-4 rounded\">\r\n        <div>{t('controlsWasd')}</div>\r\n        <div>{t('controlsSpace')}</div>\r\n        <div>{t('controlsShift')}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Tree creation (replaces the dense grass area)\r\nconst createTrees = (materials: any, count = 60, chunkSize = 50) => {\r\n  const group = new THREE.Group()\r\n  const trunkGeo = new THREE.CylinderGeometry(0.18, 0.25, 2, 8)\r\n  const coneGeo1 = new THREE.ConeGeometry(1.2, 2, 8)\r\n  const coneGeo2 = new THREE.ConeGeometry(0.8, 1.4, 8)\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const tree = new THREE.Group()\r\n\r\n    const trunk = new THREE.Mesh(trunkGeo, materials.trunk)\r\n    trunk.position.y = 1\r\n    trunk.castShadow = true\r\n    trunk.receiveShadow = true\r\n    tree.add(trunk)\r\n\r\n    const leaves1 = new THREE.Mesh(coneGeo1, materials.teaPlant)\r\n    leaves1.position.y = 2.2\r\n    leaves1.castShadow = true\r\n    tree.add(leaves1)\r\n\r\n    const leaves2 = new THREE.Mesh(coneGeo2, materials.teaPlant)\r\n    leaves2.position.y = 3.1\r\n    leaves2.castShadow = true\r\n    tree.add(leaves2)\r\n\r\n    const x = (Math.random() - 0.5) * chunkSize * 2\r\n    const z = (Math.random() - 0.5) * chunkSize * 2\r\n    tree.position.set(x, 0, z)\r\n    tree.rotation.y = Math.random() * Math.PI * 2\r\n    const s = 0.8 + Math.random() * 0.8\r\n    tree.scale.set(s, s, s)\r\n\r\n    group.add(tree)\r\n  }\r\n\r\n  return group\r\n}\r\n\r\n// (removed simple checkers board implementation to avoid duplicate declaration; use the detailed createCheckersBoard below)\r\n\r\n// New: create a checkers board with pieces\r\nconst createCheckersBoard = (materials: any, size = 8, squareSize = 1, opts?: { position?: THREE.Vector3 }) => {\r\n  const group = new THREE.Group()\r\n  const board = new THREE.Group()\r\n  const half = (size * squareSize) / 2\r\n\r\n  const darkMat = new THREE.MeshLambertMaterial({ color: 0x3b3b3b })\r\n  const lightMat = new THREE.MeshLambertMaterial({ color: 0xE0CDA2 })\r\n  const pieceBlack = new THREE.MeshLambertMaterial({ color: 0x111111 })\r\n  const pieceRed = new THREE.MeshLambertMaterial({ color: 0xAA2222 })\r\n\r\n  const squareGeo = new THREE.BoxGeometry(squareSize, 0.06, squareSize)\r\n  const pieceGeo = new THREE.CylinderGeometry(squareSize * 0.35, squareSize * 0.35, 0.25, 16)\r\n\r\n  for (let row = 0; row < size; row++) {\r\n    for (let col = 0; col < size; col++) {\r\n      const isDark = (row + col) % 2 === 1\r\n      const mat = isDark ? darkMat : lightMat\r\n      const sq = new THREE.Mesh(squareGeo, mat)\r\n      const x = col * squareSize - half + squareSize / 2\r\n      const z = row * squareSize - half + squareSize / 2\r\n      sq.position.set(x, 0, z)\r\n      sq.receiveShadow = true\r\n      board.add(sq)\r\n\r\n      // Place pieces on dark squares in first 3 and last 3 rows\r\n      if (isDark && (row < 3 || row >= size - 3)) {\r\n        const piece = new THREE.Mesh(pieceGeo, row < 3 ? pieceBlack : pieceRed)\r\n        piece.position.set(x, 0.16, z)\r\n        piece.castShadow = true\r\n        board.add(piece)\r\n      }\r\n    }\r\n  }\r\n\r\n  // thin board base\r\n  const baseGeo = new THREE.BoxGeometry(size * squareSize + 0.2, 0.1, size * squareSize + 0.2)\r\n  const baseMat = materials.stone || new THREE.MeshLambertMaterial({ color: 0x554433 })\r\n  const base = new THREE.Mesh(baseGeo, baseMat)\r\n  base.position.set(0, -0.05, 0)\r\n  base.receiveShadow = true\r\n  group.add(base)\r\n  group.add(board)\r\n\r\n  // position group if provided\r\n  if (opts?.position) {\r\n    group.position.copy(opts.position)\r\n  }\r\n\r\n  return group\r\n}\r\n\r\n// Hands creation for first-person view\r\nconst createHands = (materials: any) => {\r\n  const group = new THREE.Group()\r\n  // position relative to camera (in front, slightly down and to center)\r\n  group.position.set(0, -0.2, -0.5)\r\n\r\n  // left forearm\r\n  const armGeo = new THREE.BoxGeometry(0.18, 0.18, 0.5)\r\n  const handGeo = new THREE.BoxGeometry(0.14, 0.08, 0.2)\r\n  const mat = materials.wood || new THREE.MeshStandardMaterial({ color: 0xD1A17A })\r\n\r\n  const leftArm = new THREE.Mesh(armGeo, mat)\r\n  leftArm.position.set(-0.18, 0, -0.15)\r\n  leftArm.castShadow = true\r\n  group.add(leftArm)\r\n\r\n  const leftHand = new THREE.Mesh(handGeo, mat)\r\n  leftHand.position.set(-0.18, -0.12, -0.4)\r\n  leftHand.castShadow = true\r\n  group.add(leftHand)\r\n\r\n  // right forearm\r\n  const rightArm = new THREE.Mesh(armGeo, mat)\r\n  rightArm.position.set(0.18, 0, -0.15)\r\n  rightArm.castShadow = true\r\n  group.add(rightArm)\r\n\r\n  const rightHand = new THREE.Mesh(handGeo, mat)\r\n  rightHand.position.set(0.18, -0.12, -0.4)\r\n  rightHand.castShadow = true\r\n  group.add(rightHand)\r\n\r\n  // scale a bit and return\r\n  group.scale.set(0.9, 0.9, 0.9)\r\n  return group\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}